import json

import jinja2

from baselayer.app.env import load_env

_, cfg = load_env()


def patch_api_doc_template():
    """Patch the API documentation template with the OpenAPI spec.

    This function reads the OpenAPI specification from the openapi.json file,
    populates it with server information from the configuration, and renders
    a HTML documentation page from https://github.com/scalar/scalar
    using a Jinja2 template.

    Raises:
        ValueError: If the server information is not valid.
    """
    # open the openapi.json file generated by build-spec.py
    with open("openapi.json") as f:
        openapi_spec = json.load(f)

    # populate the OpenAPI spec with (optional) server information
    servers = cfg.get("docs.servers", [])
    if servers is None:
        servers = []
    if not isinstance(servers, list):
        raise ValueError("API servers must be a list.")

    for server in servers:
        if not all(k in server for k in ("url", "description")):
            raise ValueError("Each server must have 'url' and 'description' keys.")
    openapi_spec["servers"] = servers

    # Create a Jinja2 template environment
    template_env = jinja2.Environment(loader=jinja2.FileSystemLoader(searchpath="./"))

    # Load the template file
    template = template_env.get_template("doc/openapi.html.template")

    # Render the template with the OpenAPI spec
    output = template.render(openapi_spec=json.dumps(openapi_spec, indent=2))

    # Write the output to a new HTML file
    with open("doc/openapi.html", "w") as f:
        f.write(output)


if __name__ == "__main__":
    patch_api_doc_template()
