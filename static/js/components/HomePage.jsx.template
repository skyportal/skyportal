import React from "react";
import { useSelector, useDispatch } from "react-redux";

import { Responsive, WidthProvider } from "react-grid-layout";
// eslint-disable-next-line import/no-extraneous-dependencies
import "reactgridlayoutcss/styles.css";
// eslint-disable-next-line import/no-extraneous-dependencies
import "reactresizablecss/styles.css";

import { makeStyles, useTheme } from "@material-ui/core/styles";
import IconButton from "@material-ui/core/IconButton";
import CachedIcon from "@material-ui/icons/Cached";
import Tooltip from "@material-ui/core/Tooltip";
import convertLength from "convert-css-length";

import * as profileActions from "../ducks/profile";

import RecentSources from "./RecentSources";
import GroupList from "./GroupList";
import NewsFeed from "./NewsFeed";
import TopSources from "./TopSources";
import RecentGcnEvents from "./RecentGcnEvents";
import SourceCounts from "./SourceCounts";
import WeatherWidget from "./WeatherWidget";

const ResponsiveGridLayout = WidthProvider(Responsive);

const useStyles = makeStyles(() => ({
  widgetIcon: {
    float: "right",
    color: "gray",
    margin: "0.25rem 0.25rem 0.25rem 0.25rem",
    "&:hover": {
      cursor: "pointer",
    },
  },
  widgetPaperDiv: {
    padding: "1rem",
    height: "100%",
    display: "flex",
    flexFlow: "column nowrap",
  },
  widgetPaperFillSpace: {
    height: "100%",
  },
  resetButton: {
    position: "relative",
    float: "right",
    margin: "0.5rem",
  },
}));

const defaultLayouts = {
  {%- for breakpoint in app.homepage_grid.breakpoints.keys() %}
  {{ breakpoint }}: [
    {%- for widgetName, widgetProps in app.homepage_widgets.items() %}
    { i: "{{ widgetName }}", x: {{ widgetProps.layouts[breakpoint][0] }}, y: {{ widgetProps.layouts[breakpoint][1] }}, w: {{ widgetProps.layouts[breakpoint][2] }}, h: {{ widgetProps.layouts[breakpoint][3] }}, isResizable: {{ widgetProps.resizeable | lower }},
    {%- if widgetProps.minW is defined -%} minW: {{ widgetProps.minW }} {%- endif -%}},
    {%- endfor %}
  ],
  {%- endfor %}
}

const HomePage = () => {
  const classes = useStyles();

  // Taken from configs
  const rem = "{{ app.homepage_grid.row_height|default("9.375rem")}}";
  const theme = useTheme();
  const rootFont = theme.typography.htmlFontSize;
  const convert = convertLength(rootFont);
  const gridRowHeight = parseFloat(convert(rem, "px"));

  const groups = useSelector((state) => state.groups.user);

  const profile = useSelector((state) => state.profile);

  let currentLayouts =
    profile?.preferences.layouts == null
      ? defaultLayouts
      : profile.preferences.layouts;

  const dispatch = useDispatch();

  const LayoutChangeHandler = (currentLayout, allLayouts) => {
    const prefs = {
      layouts: allLayouts,
    };
    dispatch(profileActions.updateUserPreferences(prefs));
  };

  const resetLayouts = () => {
    currentLayouts = defaultLayouts;
    const prefs = {
      layouts: defaultLayouts,
    };
    dispatch(profileActions.updateUserPreferences(prefs));
  };

  return (
    profile &&
    profile.username !== "" &&  (
      <div>
        <ResponsiveGridLayout
          className="layout"
          layouts={currentLayouts}
          breakpoints={{ '{' + app.homepage_grid.breakpoints|tojson + '}' }}
          cols={{ '{' + app.homepage_grid.cols|tojson + '}' }}
          margin={[10, 10]}
          onLayoutChange={LayoutChangeHandler}
          draggableHandle=".dragHandle"
          rowHeight={gridRowHeight}
        >
          {%- for widgetName, widgetProps in app.homepage_widgets.items() %}
            {%- if not (widgetProps.show is defined and not widgetProps.show) %}
              {%- if widgetName == "GroupList" %}
          <div key="{{ widgetName }}">
            <{{ widgetName }}
              groups={groups}
              classes={classes}
              {%- for key, value in widgetProps.props.items() -%}
              {%- if value is string %}
              {{ key }}={"{{ value }}"}
              {%- else -%}
              {{ key }}={ {{ value }} }
              {%- endif -%}
              {%- endfor %}
            />
          </div>
              {%- else %}
          <div key="{{ widgetName }}">
            <{{ widgetName }}
              classes={classes}
              {%- if widgetProps.props is defined %}
              {% for key, value in widgetProps.props.items() -%}
              {%- if value is string %}
              {{ key }}={"{{ value }}"}
              {%- else -%}
              {{ key }}={ {{ value }} }
              {%- endif -%}
              {%- endfor -%}
              {%- endif %}
            />
          </div>
              {%- endif -%}
            {%- endif -%}
          {%- endfor %}
        </ResponsiveGridLayout>
        <div className={classes.resetButton}>
          <Tooltip title="Reset page layout">
            <IconButton size="small" onClick={resetLayouts}>
              <CachedIcon />
            </IconButton>
          </Tooltip>
        </div>
      </div>
    )
  );
};

export default HomePage;
