import React, { useEffect } from "react";
import { useDispatch, useSelector } from "react-redux";
import { Link, useLocation } from "react-router-dom";

import Typography from "@material-ui/core/Typography";
import Accordion from "@material-ui/core/Accordion";
import AccordionSummary from "@material-ui/core/AccordionSummary";
import AccordionDetails from "@material-ui/core/AccordionDetails";
import Drawer from "@material-ui/core/Drawer";
import AppBar from '@material-ui/core/AppBar';
import Toolbar from '@material-ui/core/Toolbar';
import List from "@material-ui/core/List";
import ListItem from "@material-ui/core/ListItem";
import ListItemIcon from "@material-ui/core/ListItemIcon";
import ListItemText from "@material-ui/core/ListItemText";
import IconButton from "@material-ui/core/IconButton";
import ExpandMoreIcon from '@material-ui/icons/ExpandMore';
import { makeStyles } from "@material-ui/core/styles";

{% for group in app.sidebar -%}
  {% for subitem in group.subitems -%}
    import {{ subitem.icon }}Icon from "@material-ui/icons/{{ subitem.icon }}";
  {%- endfor %}
{%- endfor %}
import MenuIcon from "@material-ui/icons/Menu";
import { isMobile } from "react-device-detect";

import QuickSearchBar from "./QuickSearchBar";
import HeaderContent from "./HeaderContent";
import * as Actions from "../ducks/sidebar";
import hydrate from "../actions";

const drawerWidth = 190;

const useStyles = makeStyles((theme) => ({
  root: {
    display: 'flex',
  },
  appBar: {
    position: "fixed",
    zIndex: 150,
    transition: theme.transitions.create(['margin', 'width'], {
      easing: theme.transitions.easing.sharp,
      duration: theme.transitions.duration.leavingScreen,
    }),
    height: "6em",
    background: theme.palette.primary.dark,
  },
  appBarShift: {
    width: `calc(100% - ${drawerWidth}px)`,
    marginLeft: drawerWidth,
    transition: theme.transitions.create(['margin', 'width'], {
      easing: theme.transitions.easing.easeOut,
      duration: theme.transitions.duration.enteringScreen,
    }),
  },
  menuButton: {
    marginTop: "0.8em",
    [theme.breakpoints.up('sm')]: {
      marginRight: theme.spacing(2),
    }
  },
  hide: {
    display: 'none',
  },
  drawer: {
    width: drawerWidth,
    flexShrink: 0,
  },
  drawerPaper: {
    zIndex: 140,
    width: drawerWidth,
    background: theme.palette.primary.light,
    fontSize: "1.2em",
    paddingTop: "1rem",
  },
  toolbar: {
    display: "flex",
    height: "4em",
    padding: "1em 0em",
    alignItems: "center",
  },
  drawerHeader: {
    display: 'flex',
    alignItems: 'center',
    padding: theme.spacing(0, 1),
    // necessary for content to be below app bar
    ...theme.mixins.toolbar,
    paddingTop: "5em",
    justifyContent: 'flex-end',
  },
  link: {
    color: theme.palette.info.main,
    textDecoration: "none",
  },
  bold: {
    color: theme.palette.info.main,
    fontWeight: "bold"
  },
  icon: {
    color: theme.palette.info.main,
  },
  dropdown: {
    backgroundColor: theme.palette.primary.light
  },
  dropdownContainer: {
    display: 'flex',
    flexDirection: 'column',
    paddingLeft: 0
  },
  menuTextContainer: {
    width: '8rem',
    marginLeft: '0.4rem',
    overflow: 'hidden',
  }
}));


const SidebarLinkText = ({ route, title }) => {
  const classes = useStyles();
  const currentRoute = useLocation().pathname;

  return (
    <ListItemText
      primary={
        <Typography className={currentRoute === route ? classes.bold : null}>
          {title}
        </Typography>
      }
    />
  );
};


const SidebarAndHeader = () => {
  const open = useSelector((state) => state.sidebar.open);
  const currentUser = useSelector((state) => state.profile);

  const dispatch = useDispatch();
  const classes = useStyles();

  const handleToggleSidebarOpen = () => {
    dispatch(Actions.toggleSidebar());
  };

  useEffect(() => {
    const handleResize = () => {
      if (window.matchMedia("(max-width: 768px)").matches) {
        dispatch(Actions.setSidebar(false));
      }
    };

    // For bigger screens, let home page know content window has resized
    // so that it can adjust widget sizes
    // A slight delay is used to make sure the sidebar is finished
    // closing/opening before new content window size is computed
    if (!window.matchMedia("(max-width: 768px)").matches) {
      setTimeout(() => {
        window.dispatchEvent(new Event("resize"));
      }, 250);
    }

    if (open) {
      window.addEventListener("resize", handleResize);
    }

    const cleanupListener = () => {
      window.removeEventListener("resize", handleResize);
    };
    return cleanupListener;
  }, [open, dispatch]);

  const drawerType = isMobile ? "temporary" : "persistent";

  const hydrateIfDashboardClicked = (url) => {
    if (url === "/") {
      dispatch(hydrate());
    }
  };

  {% macro add_items_to_menu(group) -%}
    {% for item in group.subitems -%}
    {% if item.permissions %}
      {(
      {% for permission in item.permissions %}
        currentUser.permissions?.includes("{{ permission }}") ||
      {% endfor %}
      false) && (
    {% endif %}
    {% if item.url.startswith('http') -%}
    <a href="{{ item.url }}" className={classes.link}>
    {% else %}
    <Link to="{{ item.url }}" onClick={() => hydrateIfDashboardClicked("{{ item.url }}")} className={classes.link}>
    {%- endif %}
      <ListItem button name="sidebar{{ item.name }}Button">
        <ListItemIcon>
          <{{ item.icon }}Icon className={classes.icon} />
        </ListItemIcon>
        <SidebarLinkText
          route="{{ item.url }}"
          title="{{ item.name }}"
        />
      </ListItem>
    {% if item.url.startswith('http') -%}
    </a>
    {% else %}
    </Link>
    {%- endif %}
    {% if item.permissions %}
    )}
    {% endif %}
    {%- endfor %}
  {%- endmacro %}

  {% macro make_foldable_menu(group) -%}
    {% if group.permissions %}
      {(
      {% for permission in group.permissions %}
        currentUser.permissions?.includes("{{ permission }}") ||
      {% endfor %}
      false) && (
    {% endif %}
    <Accordion className={classes.dropdown}>
      <AccordionSummary
        expandIcon={<ExpandMoreIcon className={classes.icon}/>}
        aria-controls="panel1a-content"
        id="panel1a-header"
      >
        <div className={classes.menuTextContainer}>
          <Typography noWrap className={classes.icon}>{{ group.name }}</Typography>
        </div>
      </AccordionSummary>
      <AccordionDetails className={classes.dropdownContainer}>
        {{ add_items_to_menu(group) }}
      </AccordionDetails>
    </Accordion>
    {% if group.permissions %}
    )}
    {% endif %}
  {%- endmacro %}

  return (
    <>
      <AppBar
        className={classes.appBar}
      >
        <Toolbar>
          <IconButton
            color="inherit"
            aria-label="open drawer"
            onClick={handleToggleSidebarOpen}
            edge="start"
            className={classes.menuButton}
          >
            <MenuIcon />
          </IconButton>
          <HeaderContent />
        </Toolbar>
      </AppBar>
      <Drawer
        className={classes.drawer}
        variant={drawerType}
        anchor="left"
        open={open}
        onClose={isMobile ? handleToggleSidebarOpen : undefined}
        classes={{ "{{ paper: classes.drawerPaper }}" }}
      >
        {!isMobile && <div className={classes.drawerHeader} />}
        <List>
        {% for group in app.sidebar -%}
          {% if group.name.startswith('main') %}
            {{ add_items_to_menu(group) }}
          {% else %}
            {{ make_foldable_menu(group) }}
          {% endif %}
        {%- endfor %}
        </List>

        <QuickSearchBar id="search" />
      </Drawer>
    </>
  );
};

export default SidebarAndHeader;
