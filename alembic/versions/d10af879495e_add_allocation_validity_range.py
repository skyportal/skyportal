"""add_allocation_validity_range

Revision ID: d10af879495e
Revises: b3e29f8c1a7d
Create Date: 2025-07-30 12:46:00.552248

"""

import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

from alembic import op

# revision identifiers, used by Alembic.
revision = "d10af879495e"
down_revision = "b3e29f8c1a7d"
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column(
        "allocations",
        sa.Column(
            "validity_ranges", postgresql.JSONB(astext_type=sa.Text()), nullable=True
        ),
    )

    # Add start_date and end_date value to validity_ranges
    op.execute("""
        UPDATE allocations
        SET validity_ranges = jsonb_build_array(
            jsonb_build_object(
                'start_date', to_char(start_date, 'YYYY-MM-DD"T"HH24:MI:SS"Z"'),
                'end_date', to_char(end_date, 'YYYY-MM-DD"T"HH24:MI:SS"Z"')
            )
        )
        WHERE start_date IS NOT NULL AND end_date IS NOT NULL;
    """)

    op.drop_column("allocations", "end_date")
    op.drop_column("allocations", "start_date")
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column(
        "allocations",
        sa.Column(
            "start_date", postgresql.TIMESTAMP(), autoincrement=False, nullable=True
        ),
    )
    op.add_column(
        "allocations",
        sa.Column(
            "end_date", postgresql.TIMESTAMP(), autoincrement=False, nullable=True
        ),
    )

    # Restore start_date and end_date from validity_ranges
    op.execute("""
        UPDATE allocations
        SET start_date = (validity_ranges->0->>'start_date')::timestamp,
            end_date = (validity_ranges->0->>'end_date')::timestamp
        WHERE validity_ranges IS NOT NULL;
    """)

    op.drop_column("allocations", "validity_ranges")
    # ### end Alembic commands ###
