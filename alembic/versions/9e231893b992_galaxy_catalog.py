"""galaxy-catalog

Revision ID: 9e231893b992
Revises: 0f1f62adc91c
Create Date: 2024-06-18 19:39:34.147755

"""

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '9e231893b992'
down_revision = '0f1f62adc91c'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        'galaxycatalogs',
        sa.Column('name', sa.String(), nullable=False),
        sa.Column('description', sa.String(), nullable=True),
        sa.Column('url', sa.String(), nullable=True),
        sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
        sa.Column('created_at', sa.DateTime(), nullable=False),
        sa.Column('modified', sa.DateTime(), nullable=False),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('name'),
    )
    op.create_index(
        op.f('ix_galaxycatalogs_created_at'),
        'galaxycatalogs',
        ['created_at'],
        unique=False,
    )
    op.add_column('galaxys', sa.Column('catalog_id', sa.Integer(), nullable=True))
    op.drop_constraint('galaxys_name_key', 'galaxys', type_='unique')
    op.drop_index('ix_galaxys_catalog_name', table_name='galaxys')
    op.create_index(
        op.f('ix_galaxys_catalog_id'), 'galaxys', ['catalog_id'], unique=False
    )

    # we need to find all the unique catalog names and create a catalog for each
    # so we can assign the catalog_id to the galaxies
    catalog_names = set()
    for galaxy in (
        op.get_bind().execute(sa.text('SELECT catalog_name FROM galaxys;')).fetchall()
    ):
        catalog_names.add(str(galaxy[0]))
    for catalog_name in catalog_names:
        op.execute(
            f"INSERT INTO galaxycatalogs (name, created_at, modified) VALUES ('{catalog_name}', now(), now())"
        )

    # now we need to update the galaxies with the catalog_id
    catalog_name_to_id = {}
    for catalog in (
        op.get_bind()
        .execute(sa.text('SELECT id, name FROM galaxycatalogs;'))
        .fetchall()
    ):
        catalog_name_to_id[str(catalog[1])] = catalog[0]
    for catalog_name, catalog_id in catalog_name_to_id.items():
        op.execute(
            f"UPDATE galaxys SET catalog_id = {catalog_id} WHERE catalog_name = '{catalog_name}'"
        )

    # make the column not nullable again
    op.alter_column('galaxys', 'catalog_id', existing_type=sa.Integer(), nullable=False)

    op.create_foreign_key(
        None, 'galaxys', 'galaxycatalogs', ['catalog_id'], ['id'], ondelete='CASCADE'
    )
    op.drop_column('galaxys', 'catalog_name')
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column(
        'galaxys',
        sa.Column('catalog_name', sa.VARCHAR(), autoincrement=False, nullable=False),
    )

    # find a mapping of catalog_id to catalog_name
    # so we can update the galaxies with the catalog_name
    catalog_id_to_name = {}
    for catalog in (
        op.get_bind()
        .execute(sa.text('SELECT id, name FROM galaxycatalogs;'))
        .fetchall()
    ):
        catalog_id_to_name[catalog[0]] = str(catalog[1])
    for catalog_id, catalog_name in catalog_id_to_name.items():
        op.execute(
            f"UPDATE galaxys SET catalog_name = '{catalog_name}' WHERE catalog_id = {catalog_id}"
        )

    op.drop_constraint(None, 'galaxys', type_='foreignkey')
    op.drop_index(op.f('ix_galaxys_catalog_id'), table_name='galaxys')
    op.create_index(
        'ix_galaxys_catalog_name', 'galaxys', ['catalog_name'], unique=False
    )
    op.create_unique_constraint('galaxys_name_key', 'galaxys', ['name'])
    op.drop_column('galaxys', 'catalog_id')
    op.drop_index(op.f('ix_galaxycatalogs_created_at'), table_name='galaxycatalogs')
    op.drop_table('galaxycatalogs')
    # ### end Alembic commands ###
